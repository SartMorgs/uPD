library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity CAMINHO_CONTROLE is
	 Generic(
	 		p_DATA_WIDTH   : INTEGER := 16;        -- Número de bits dos dados. 
	 		p_ADD_WIDTH    : INTEGER := 9         -- Número de bits dos endereços. 
	 );
    Port ( 
				i_CLK		: in  STD_LOGIC;
				i_RST		: in  STD_LOGIC;
				
				i_DATA_ROM	: in  STD_LOGIC_VECTOR((p_DATA_WIDTH-1) DOWNTO 0);	  
				i_DATA_ULA	: in  STD_LOGIC;
				o_SEL_ULA	: out STD_LOGIC_VECTOR(2 DOWNTO 0);	
				o_SEL_IMED	: out STD_LOGIC_VECTOR(1 DOWNTO 0);	
				o_WR_BCO   	: out STD_LOGIC;
				o_WR_RAM   	: out STD_LOGIC;
				o_WR_IO    	: out STD_LOGIC;
				o_RD_IO		: out STD_LOGIC;
				o_EN_ROM	: out STD_LOGIC;
				o_ADD_ROM	: out STD_LOGIC_VECTOR(10 DOWNTO 0);
				o_DATA		: out STD_LOGIC_VECTOR(10 DOWNTO 0);
				o_EN_CLK	: out STD_LOGIC;
				
				o_RET		: out STD_LOGIC;
				o_DOUT_LIFO : out STD_LOGIC_VECTOR(63 DOWNTO 0);
				i_DIN_LIFO  : in  STD_LOGIC_VECTOR(63 DOWNTO 0);
				
				i_INT0		: in  STD_LOGIC;
				i_INT1		: in  STD_LOGIC;
				i_INT2		: in  STD_LOGIC;
				o_BUSY      : out STD_LOGIC				
	 );
end CAMINHO_CONTROLE;

architecture Behavioral of CAMINHO_CONTROLE is
-----------------------------------------------------------------

	COMPONENT CONTROLE is
	    Generic (
					p_DATA_WIDTH	: INTEGER := 16
	    );	
	    Port ( 
					i_CLK		: in  STD_LOGIC;
					i_RST		: in  STD_LOGIC;
					i_DATA   	: in  STD_LOGIC_VECTOR((p_DATA_WIDTH-1) DOWNTO 0);	  
					i_DATA_ULA	: in  STD_LOGIC;
					o_SEL_ULA	: out STD_LOGIC_VECTOR(2 DOWNTO 0);	
					o_SEL_IMED	: out STD_LOGIC_VECTOR(1 DOWNTO 0);	
					o_WR_BCO   	: out STD_LOGIC;
					o_WR_RAM   	: out STD_LOGIC;
					o_WR_IO    	: out STD_LOGIC;
					o_RD_IO		: out STD_LOGIC;
				    o_PUSH  	: out STD_LOGIC;
				    o_POP   	: out STD_LOGIC;
					o_RET		: out STD_LOGIC;
					o_EN_ROM	: out STD_LOGIC;
					o_ADD_ROM	: out STD_LOGIC_VECTOR((p_DATA_WIDTH-8) DOWNTO 0);
					i_NEXT_PC   : in  STD_LOGIC_VECTOR((p_DATA_WIDTH-8) DOWNTO 0);
					o_INT_ADD	: out STD_LOGIC_VECTOR(1 DOWNTO 0);
					i_INT0		: in  STD_LOGIC;
					i_INT1		: in  STD_LOGIC;
					i_INT2		: in  STD_LOGIC					
		 );
	end COMPONENT;


	COMPONENT REGISTRADOR is
		 Generic (
					p_DATA_WIDTH		: INTEGER := 16
		 );
		 Port ( 
					i_CLK   	: in  STD_LOGIC;
					i_RST   	: in  STD_LOGIC;
					i_DATA		: in  STD_LOGIC_VECTOR((p_DATA_WIDTH-1) DOWNTO 0);	  
					o_DATA		: out STD_LOGIC_VECTOR((p_DATA_WIDTH-1) DOWNTO 0);	
					i_WR   		: in  STD_LOGIC	
		 );
	end COMPONENT;	

	COMPONENT LIFO is
		 Generic(
				p_DATA_WIDTH   : INTEGER := 16;        -- Número de bits dos dados. 
				p_ADD_WIDTH    : INTEGER := 9         -- Número de bits dos endereços. 
		 );
		Port ( 
			  i_CLK 	: in  STD_LOGIC;
			  i_RST   	: in  STD_LOGIC;
			  i_RD 		: in  STD_LOGIC;
			  i_WR 		: in  STD_LOGIC;
			  i_DATA  	: in  STD_LOGIC_VECTOR ((p_DATA_WIDTH-1) downto 0);
			  o_DATA  	: out STD_LOGIC_VECTOR ((p_DATA_WIDTH-1) downto 0)
		 );
	end COMPONENT;

	
	COMPONENT INTERRUPCAO is
		Port ( 
				i_CLK   	: in  STD_LOGIC;
				i_RST   	: in  STD_LOGIC;
				i_INT_ADD	: in  STD_LOGIC_VECTOR(1 DOWNTO 0);
				i_INT0		: in  STD_LOGIC;
				i_INT1		: in  STD_LOGIC;
				i_INT2		: in  STD_LOGIC;
				o_BUSY      : out STD_LOGIC;
				o_INT0		: out STD_LOGIC;
				o_INT1		: out STD_LOGIC;
				o_INT2		: out STD_LOGIC			
		 );
	end COMPONENT;
	
	
	-- ============================================================
	-- GERAÇÃO DE SINAIS
	-- ============================================================
	
	
-----------------------------------------------------------------	
begin

	
	
	-- =============================================================
	-- LÓGICA DE CONTROLE 
	-- =============================================================	
	U_DEC : CONTROLE 
	    Generic Map (
					p_DATA_WIDTH	=> p_DATA_WIDTH
	    )	
	    Port Map ( 
					i_CLK   		=>	,
					i_RST   		=>	,
					i_DATA   		=>	,
					i_DATA_ULA		=>	,
					o_SEL_ULA		=>	,
					o_SEL_IMED		=>	,
					o_WR_BCO      	=>	,
					o_WR_RAM      	=>	,
					o_WR_IO       	=>	,
					o_RD_IO			=>	,
					o_PUSH  		=>	,
					o_POP   		=>	,
					o_RET			=>	,
					o_EN_ROM		=>	,
					o_ADD_ROM		=>	,
					i_NEXT_PC		=>	,
					o_INT_ADD	    =>	,
					i_INT0			=>	,
					i_INT1			=>	,
					i_INT2			=>	
		);
	
		o_ADD_ROM <= ;
		
		
		-- =============================================================
		-- TRATAMENTO DE INTERRUPCOES.
		-- ==============================================================

		U_INT : INTERRUPCAO 
		Port Map ( 
					i_CLK   	=>	,
					i_RST   	=>	,
					i_INT_ADD	=>	,
					i_INT0		=>	,
					i_INT1		=>	,
					i_INT2		=>	,
					o_BUSY      =>	,
					o_INT0		=>	,
					o_INT1		=>	,
					o_INT2		=>	
		 );
		
		-- =============================================================
		-- SALVAR E RESTAURAR REGISTRADORES.
		-- =============================================================

		o_DOUT_LIFO <= ;
		
	
		U_LIFO : LIFO 
		 Generic Map (
						p_DATA_WIDTH   => 73,
						p_ADD_WIDTH    => p_ADD_WIDTH
		 )
		 Port Map ( 
					  i_CLK 	=>	,
					  i_RST   	=>	,
					  i_RD 		=>	,
					  i_WR 		=>	,
					  i_DATA  	=>	,
					  o_DATA  	=> 
		 );
		 
-----------------------------------------------------------------	
end behavioral;